{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\salma\\\\Desktop\\\\Test\\\\Test\\\\client\\\\src\\\\components\\\\DreamSky.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DreamSky = ({\n  dreams,\n  skyColor,\n  onDreamClick\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Create gradient background\n    const gradient = ctx.createRadialGradient(canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, Math.max(canvas.width, canvas.height) / 2);\n    gradient.addColorStop(0, skyColor);\n    gradient.addColorStop(1, '#000011');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw background stars\n    for (let i = 0; i < 200; i++) {\n      const x = Math.random() * canvas.width;\n      const y = Math.random() * canvas.height;\n      const size = Math.random() * 2;\n      const opacity = Math.random() * 0.8 + 0.2;\n      ctx.beginPath();\n      ctx.arc(x, y, size, 0, Math.PI * 2);\n      ctx.fillStyle = `rgba(255, 255, 255, ${opacity})`;\n      ctx.fill();\n    }\n\n    // Draw dream stars - ensure dreams is an array\n    if (Array.isArray(dreams)) {\n      dreams.forEach((dream, index) => {\n        const x = (dream.position.x + 10) * (canvas.width / 20);\n        const y = (dream.position.y + 10) * (canvas.height / 20);\n\n        // Determine star color based on mood\n        let starColor;\n        if (dream.moodScore > 0.3) starColor = '#ffd700'; // Gold for positive\n        else if (dream.moodScore < -0.3) starColor = '#ff6b6b'; // Red for negative\n        else starColor = '#c0c0c0'; // Silver for neutral\n\n        // Draw star glow\n        const glowSize = Math.abs(dream.moodScore) * 20 + 15;\n        const gradient = ctx.createRadialGradient(x, y, 0, x, y, glowSize);\n        gradient.addColorStop(0, starColor);\n        gradient.addColorStop(1, 'transparent');\n        ctx.beginPath();\n        ctx.arc(x, y, glowSize, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        ctx.fill();\n\n        // Draw star core\n        const coreSize = Math.abs(dream.moodScore) * 5 + 3;\n        ctx.beginPath();\n        ctx.arc(x, y, coreSize, 0, Math.PI * 2);\n        ctx.fillStyle = starColor;\n        ctx.fill();\n\n        // Add click handler\n        canvas.addEventListener('click', e => {\n          const rect = canvas.getBoundingClientRect();\n          const clickX = e.clientX - rect.left;\n          const clickY = e.clientY - rect.top;\n          const distance = Math.sqrt((clickX - x) ** 2 + (clickY - y) ** 2);\n          if (distance < glowSize) {\n            onDreamClick(dream);\n          }\n        });\n      });\n    }\n  }, [dreams, skyColor, onDreamClick]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: \"w-full h-full cursor-pointer\",\n      style: {\n        background: `radial-gradient(circle, ${skyColor} 0%, #000011 100%)`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(DreamSky, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = DreamSky;\nexport default DreamSky;\nvar _c;\n$RefreshReg$(_c, \"DreamSky\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","DreamSky","dreams","skyColor","onDreamClick","_s","canvasRef","canvas","current","ctx","getContext","width","window","innerWidth","height","innerHeight","clearRect","gradient","createRadialGradient","Math","max","addColorStop","fillStyle","fillRect","i","x","random","y","size","opacity","beginPath","arc","PI","fill","Array","isArray","forEach","dream","index","position","starColor","moodScore","glowSize","abs","coreSize","addEventListener","e","rect","getBoundingClientRect","clickX","clientX","left","clickY","clientY","top","distance","sqrt","className","children","ref","style","background","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/salma/Desktop/Test/Test/client/src/components/DreamSky.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Dream } from '../types/Dream';\n\ninterface DreamSkyProps {\n  dreams: Dream[];\n  skyColor: string;\n  onDreamClick: (dream: Dream) => void;\n}\n\nconst DreamSky: React.FC<DreamSkyProps> = ({ dreams, skyColor, onDreamClick }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Create gradient background\n    const gradient = ctx.createRadialGradient(\n      canvas.width / 2, canvas.height / 2, 0,\n      canvas.width / 2, canvas.height / 2, Math.max(canvas.width, canvas.height) / 2\n    );\n    gradient.addColorStop(0, skyColor);\n    gradient.addColorStop(1, '#000011');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw background stars\n    for (let i = 0; i < 200; i++) {\n      const x = Math.random() * canvas.width;\n      const y = Math.random() * canvas.height;\n      const size = Math.random() * 2;\n      const opacity = Math.random() * 0.8 + 0.2;\n\n      ctx.beginPath();\n      ctx.arc(x, y, size, 0, Math.PI * 2);\n      ctx.fillStyle = `rgba(255, 255, 255, ${opacity})`;\n      ctx.fill();\n    }\n\n    // Draw dream stars - ensure dreams is an array\n    if (Array.isArray(dreams)) {\n      dreams.forEach((dream, index) => {\n        const x = (dream.position.x + 10) * (canvas.width / 20);\n        const y = (dream.position.y + 10) * (canvas.height / 20);\n        \n        // Determine star color based on mood\n        let starColor;\n        if (dream.moodScore > 0.3) starColor = '#ffd700'; // Gold for positive\n        else if (dream.moodScore < -0.3) starColor = '#ff6b6b'; // Red for negative\n        else starColor = '#c0c0c0'; // Silver for neutral\n\n        // Draw star glow\n        const glowSize = Math.abs(dream.moodScore) * 20 + 15;\n        const gradient = ctx.createRadialGradient(x, y, 0, x, y, glowSize);\n        gradient.addColorStop(0, starColor);\n        gradient.addColorStop(1, 'transparent');\n        \n        ctx.beginPath();\n        ctx.arc(x, y, glowSize, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        ctx.fill();\n\n        // Draw star core\n        const coreSize = Math.abs(dream.moodScore) * 5 + 3;\n        ctx.beginPath();\n        ctx.arc(x, y, coreSize, 0, Math.PI * 2);\n        ctx.fillStyle = starColor;\n        ctx.fill();\n\n        // Add click handler\n        canvas.addEventListener('click', (e) => {\n          const rect = canvas.getBoundingClientRect();\n          const clickX = e.clientX - rect.left;\n          const clickY = e.clientY - rect.top;\n          \n          const distance = Math.sqrt((clickX - x) ** 2 + (clickY - y) ** 2);\n          if (distance < glowSize) {\n            onDreamClick(dream);\n          }\n        });\n      });\n    }\n  }, [dreams, skyColor, onDreamClick]);\n\n  return (\n    <div className=\"fixed inset-0\">\n      <canvas\n        ref={canvasRef}\n        className=\"w-full h-full cursor-pointer\"\n        style={{ background: `radial-gradient(circle, ${skyColor} 0%, #000011 100%)` }}\n      />\n    </div>\n  );\n};\n\nexport default DreamSky; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}